<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>jjssoftware.github.io blog</description>
    <link>https://jjssoftware.github.io/</link>
    <atom:link href="https://jjssoftware.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 03 Dec 2016 20:38:55 +0000</pubDate>
    <lastBuildDate>Sat, 03 Dec 2016 20:38:55 +0000</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>esp8266 two factor authentication</title>
        <description>&lt;h2 id=&quot;adding-another-layer&quot;&gt;Adding another layer..&lt;/h2&gt; &lt;p&gt;In my &lt;a href=&quot;/esp8266-password-complexify/&quot; target=&quot;_blank&quot;&gt;previous article&lt;/a&gt; that talked about beefing up security on public internet facing IOT devices, I mentioned one of a number of potential improvements that I could introduce to my own stuff was two factor authentication. After a little thought I decided to have a go at implementing it.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6238&quot; target=&quot;_blank&quot;&gt;RFC6238&lt;/a&gt; / Google Authenticator support looked like a good fit for me because it’s a purely mathematical self contained algorithm based on HMAC and epoch time so it’s all done in software with no hardware dependencies. Add to that other people have...</description>
        <pubDate>Sat, 03 Dec 2016 16:50:55 +0000</pubDate>
        <link>https://jjssoftware.github.io/esp8266-rfc6238-totp/</link>
        <guid isPermaLink="true">https://jjssoftware.github.io/esp8266-rfc6238-totp/</guid>
        
        <category>esp8266</category>
        
        <category>C/C++</category>
        
        <category>security</category>
        
        <category>passwords</category>
        
        <category>secondary authentication</category>
        
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>More esp8266 security</title>
        <description>&lt;h2 id=&quot;ermp55w0rd1&quot;&gt;..erm..P@55w0rd1!&lt;/h2&gt; &lt;p&gt;IOT device security is a hot topic at the moment. Many well known websites, services and companies are regularly coming under massive DDOS attacks and are being knocked offline. Recently these attacks are coming from &lt;a href=&quot;https://en.wikipedia.org/wiki/Mirai_(malware)&quot; target=&quot;_blank&quot;&gt;Mirai malware&lt;/a&gt; which targets IOT devices with weak default passwords and these IOT devices are being recruited into IOT powered botnets under the control of internet miscreants. Krebs came under attack, dyn came under attack and there was even discussion whether the &lt;a href=&quot;https://krebsonsecurity.com/2016/11/did-the-mirai-botnet-really-take-liberia-offline/&quot; target=&quot;_blank&quot;&gt;country of Liberia&lt;/a&gt; was being completely knocked offline by Mirai.&lt;/p&gt; &lt;p&gt;IOT device manufacturers are in the frame...</description>
        <pubDate>Fri, 11 Nov 2016 07:55:43 +0000</pubDate>
        <link>https://jjssoftware.github.io/esp8266-password-complexify/</link>
        <guid isPermaLink="true">https://jjssoftware.github.io/esp8266-password-complexify/</guid>
        
        <category>esp8266</category>
        
        <category>C/C++</category>
        
        <category>JavaScript</category>
        
        <category>security</category>
        
        <category>passwords</category>
        
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>An esp8266 Lithium Charging Breakout PCB</title>
        <description>&lt;h2 id=&quot;shrink-that-prototype&quot;&gt;Shrink that prototype&lt;/h2&gt; &lt;p&gt;This is a follow on to my &lt;a href=&quot;/esp8266-configurable-power-management/&quot; target=&quot;_blank&quot;&gt;last post&lt;/a&gt; which was about building a prototyped lithium charging ESP8266 (ESP12) breakout board along with some power management firmware features. Having had reasonable success with the stripboard prototype, the next step was to create a PCB version of this project. PCBs are everywhere and although over time I’ve fiddled around with attempting to fix TVs and stereo systems with varying levels of success, I’ve never designed and created a PCB of my own so this was a completely new discipline to me.&lt;/p&gt; &lt;p&gt;I set myself the...</description>
        <pubDate>Thu, 15 Sep 2016 08:49:10 +0100</pubDate>
        <link>https://jjssoftware.github.io/esp8266-lithium-charging-breakout-pcb/</link>
        <guid isPermaLink="true">https://jjssoftware.github.io/esp8266-lithium-charging-breakout-pcb/</guid>
        
        <category>esp8266</category>
        
        <category>pcb</category>
        
        <category>battery</category>
        
        <category>solar</category>
        
        
        <category>electronics</category>
        
      </item>
    
      <item>
        <title>esp8266 Configurable Power Management</title>
        <description>&lt;h2 id=&quot;a-100-solar-application&quot;&gt;A 100% solar application&lt;/h2&gt; &lt;p&gt;Since the start of getting going with esp8266 boards in late 2015 I’ve had in the back of my mind the idea of how nice it would be to develop a little device that is free of all ties to a regular plug-in-the-wall power supply. With no plug in supply, we’re talking about battery power and if the goal of this project is complete independence then we’re talking rechargeable battery power. If this dream was a reality then the idea is that the device could go anywhere and be positioned anywhere, within WiFi range.&lt;/p&gt; &lt;p&gt;I...</description>
        <pubDate>Tue, 19 Jul 2016 20:25:10 +0100</pubDate>
        <link>https://jjssoftware.github.io/esp8266-configurable-power-management/</link>
        <guid isPermaLink="true">https://jjssoftware.github.io/esp8266-configurable-power-management/</guid>
        
        <category>esp8266</category>
        
        <category>C/C++</category>
        
        <category>arduino</category>
        
        
        <category>firmware</category>
        
      </item>
    
      <item>
        <title>esp8266 Automated Project Versioning</title>
        <description>&lt;h2 id=&quot;auto-generate-a-version-number&quot;&gt;Auto-generate a version number&lt;/h2&gt; &lt;p&gt;This is a quick post about a method that can be used to get the preprocessor to do the job of generating a self incrementing version build number. This can eliminate a potentially boring repetitive task if you’re currently doing it in some manual way. The trick described here uses the built in &lt;strong&gt;__DATE__&lt;/strong&gt; and &lt;strong&gt;__TIME__&lt;/strong&gt; GCC preprocessor macros.&lt;/p&gt; &lt;p&gt;Inquisitive types can read more about these macros &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/cpp/Standard-Predefined-Macros.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here’s the sample code for the method described: &lt;a href=&quot;https://github.com/jjssoftware/autoVersioning&quot; target=&quot;_blank&quot;&gt;https://github.com/jjssoftware/autoVersioning&lt;/a&gt;. There’s not a lot of code and it’s probably quickest to just have a...</description>
        <pubDate>Wed, 22 Jun 2016 21:45:10 +0100</pubDate>
        <link>https://jjssoftware.github.io/esp8266-automated-version-number-generation/</link>
        <guid isPermaLink="true">https://jjssoftware.github.io/esp8266-automated-version-number-generation/</guid>
        
        <category>esp8266</category>
        
        <category>C/C++</category>
        
        <category>arduino</category>
        
        
        <category>firmware</category>
        
      </item>
    
      <item>
        <title>Securing your esp8266</title>
        <description>&lt;h2 id=&quot;the-internet-and-esp8266&quot;&gt;The internet and esp8266&lt;/h2&gt; &lt;p&gt;This is an article about using TLS/SSL to secure an esp8266 device so it can be safely accessed over the internet. This is important for me because the firmware running on my device is &lt;a href=&quot;/id8266-aka-skynet/&quot;&gt;http web based firmware&lt;/a&gt; and I’d like to be able to access my device from anywhere. If you use your esp8266 device to switch your lights on/off, open/close the curtains, control the heating in your home, something else you don’t want some random person in Timbuktoo having control of then you 100% will want to be securing access to your...</description>
        <pubDate>Sat, 18 Jun 2016 13:19:30 +0100</pubDate>
        <link>https://jjssoftware.github.io/secure-your-esp8266/</link>
        <guid isPermaLink="true">https://jjssoftware.github.io/secure-your-esp8266/</guid>
        
        <category>esp8266</category>
        
        <category>arduino</category>
        
        <category>tls</category>
        
        <category>ssl</category>
        
        <category>internet</category>
        
        <category>web</category>
        
        <category>security</category>
        
        
        <category>web</category>
        
        <category>internet</category>
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>esp8266 String Optimization</title>
        <description>&lt;h2 id=&quot;big-software--little-software&quot;&gt;Big software / little software&lt;/h2&gt; &lt;p&gt;Traditional software systems and platforms (think Twitter, your operating system, the web browser you’re using right now to read this article etc) run on servers and personal computers that have gigabytes of RAM available for developers to use. Mobile phones have reached the point where they also have gigabytes of RAM onboard. Add to this operating system features like virtual memory management and it’s easy to see why developers that are creating software targetting these platforms might tend to treat system resources as limitless to use as they see fit. There are exceptions to...</description>
        <pubDate>Wed, 15 Jun 2016 22:20:02 +0100</pubDate>
        <link>https://jjssoftware.github.io/string-optimization/</link>
        <guid isPermaLink="true">https://jjssoftware.github.io/string-optimization/</guid>
        
        <category>esp8266</category>
        
        <category>C/C++</category>
        
        <category>arduino</category>
        
        
        <category>firmware</category>
        
      </item>
    
      <item>
        <title>esp8266 Dynamic Web Forms</title>
        <description>&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt; &lt;p&gt;In my &lt;a href=&quot;/id8266-aka-skynet/&quot;&gt;last post&lt;/a&gt; where I talked about my ep8266 web based firmware project, it became apparent fairly early in the process of putting things together than I needed some way to render dynamic data in the web pages I was building e.g. current device network configuration settings, device web server settings etc. In the ‘heavyweight’ web based systems and platforms that I’ve worked with in my day job there has always been some sort of framework to help out in this area. If I was working / developing in ASP.NET web forms, MVC, PHP, Express...</description>
        <pubDate>Mon, 13 Jun 2016 20:40:46 +0100</pubDate>
        <link>https://jjssoftware.github.io/dynamic-web-forms/</link>
        <guid isPermaLink="true">https://jjssoftware.github.io/dynamic-web-forms/</guid>
        
        <category>esp8266</category>
        
        <category>HTML</category>
        
        <category>AJAX</category>
        
        <category>JavaScript</category>
        
        
        <category>web</category>
        
        <category>internet</category>
        
      </item>
    
      <item>
        <title>iD8266 (aka SkyNet)</title>
        <description>&lt;h2 id=&quot;esp8266-web-based-firmware&quot;&gt;esp8266 web based firmware&lt;/h2&gt; &lt;p&gt;I’ve been working on a project to create custom web based firmware for the esp8266 for about the last six months. If you landed here and you don’t know what an &lt;a href=&quot;http://www.esp8266.com/&quot; target=&quot;_blank&quot;&gt;esp8266&lt;/a&gt; is, it’s a tiny WiFi enabled microprocessor board in various models with varying features depending on which model you go for. There’s a large community around these devices with hobbyists / DIY electronics people and if you’re an avr / arduino tinkerer you’ll feel right at home playing around with esp8266 boards.&lt;/p&gt; &lt;p&gt;By and large these devices are made by a...</description>
        <pubDate>Sun, 12 Jun 2016 08:42:54 +0100</pubDate>
        <link>https://jjssoftware.github.io/id8266-aka-skynet/</link>
        <guid isPermaLink="true">https://jjssoftware.github.io/id8266-aka-skynet/</guid>
        
        <category>iD8266</category>
        
        <category>esp8266</category>
        
        <category>youtube</category>
        
        
        <category>videos</category>
        
      </item>
    
      <item>
        <title>hello jjssoftware.github.io</title>
        <description>&lt;p&gt;Hi! This is post #1. Not much to say at the moment but I’d like to give a thumbs up and thanks to &lt;a href=&quot;https://willianjusten.com.br/&quot;&gt;Willian Justen&lt;/a&gt; for providing the great &lt;a href=&quot;https://github.com/willianjusten/will-jekyll-template&quot;&gt;jekyll template&lt;/a&gt; that I’m going to be using for creating and maintaining this site.&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Jun 2016 16:24:56 +0100</pubDate>
        <link>https://jjssoftware.github.io/hello.jjssoftware.github.io/</link>
        <guid isPermaLink="true">https://jjssoftware.github.io/hello.jjssoftware.github.io/</guid>
        
        <category>blog</category>
        
        <category>post</category>
        
        <category>jekyll</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
